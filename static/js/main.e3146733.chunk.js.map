{"version":3,"sources":["components/Weather.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","onSubmit","submit","id","type","Result","console","log","data","city","country","temp","pressure","humidity","temp_min","temp_max","API","App","state","bind","event","document","getElementById","value","this","setState","preventDefault","fetch","then","response","json","Math","floor","main","catch","error","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAiBeA,MAdf,SAAkBC,GACd,OACI,yBAAKC,UAAU,SACX,0BAAMC,SAAUF,EAAMG,QAClB,mDAA+B,6BAC/B,2BAAOC,GAAG,OAAOC,KAAK,SAAQ,6BAC9B,sDAAkC,6BAClC,2BAAOD,GAAG,UAAUC,KAAK,SAAQ,6BACjC,kDCODC,MAhBf,SAAgBN,GAEZ,OADAO,QAAQC,IAAIR,EAAMS,MAEd,yBAAKR,UAAU,UACXD,EAAMG,OAAQ,0CAAgBH,EAAMS,KAAKC,KAA3B,KAAmCV,EAAMS,KAAKE,QAA9C,UAAoE,KAClF,oCACWX,EAAMS,KAAKG,KAAK,6BAD3B,aAEeZ,EAAMS,KAAKI,SAAS,6BAFnC,aAGeb,EAAMS,KAAKK,SAAS,6BAHnC,aAIed,EAAMS,KAAKM,SAAS,6BAJnC,aAKef,EAAMS,KAAKO,SAAS,gCCL3CN,EAAO,GACPC,EAAU,GACVM,EAAO,GAmEIC,E,kDA/Db,aAAc,IAAD,8BACX,gBACKC,MAAM,CACThB,QAAO,EACPO,KAAK,GACLC,QAAQ,IAEV,EAAKR,OAAS,EAAKA,OAAOiB,KAAZ,gBAPH,E,mDAUNC,GAAO,IAAD,OAEXX,EAAOY,SAASC,eAAe,QAAQC,MACvCb,EAAUW,SAASC,eAAe,WAAWC,MAE7CP,EAAG,4DAAwDP,EAAxD,YAAgEC,EAAhE,2CAEHc,KAAKC,SAAS,CACZvB,QAAO,EACPO,KAAKA,EACLC,QAAQA,EACRC,KAAK,IACLC,SAAS,IACTC,SAAS,IACTC,SAAS,IACTC,SAAS,MAGXK,EAAMM,iBACNpB,QAAQC,IAAIS,GACZW,MAAMX,GACHY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAApB,GAEJ,EAAKiB,SAAS,CACZd,KAAKoB,KAAKC,MAAMxB,EAAKyB,KAAKtB,KAAK,QAC/BC,SAASJ,EAAKyB,KAAKrB,SACnBC,SAASL,EAAKyB,KAAKpB,SACnBC,SAASiB,KAAKC,MAAMxB,EAAKyB,KAAKnB,SAAS,QACvCC,SAASgB,KAAKC,MAAMxB,EAAKyB,KAAKlB,SAAS,aAI1CmB,OAAM,SAAAC,GAAK,OAAE7B,QAAQ6B,MAAMA,Q,+BAM9B,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,CACAE,OAAQsB,KAAKtB,SAEb,kBAAC,EAAD,CACAM,KAAMgB,KAAKN,MACXhB,OAAQsB,KAAKN,MAAMhB,c,GA1DTkC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASC,eAAe,SD2H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.e3146733.chunk.js","sourcesContent":["import React from 'react'\r\n//This function allows the user to enter a city and country.\r\n//the users input is sent up to the parent component via the onSubmit which calls a function in the parent component\r\nfunction Weather (props){\r\n    return(\r\n        <div className=\"input\">\r\n            <form onSubmit={props.submit}>\r\n                <label>Enter Your City:</label><br/>\r\n                <input id=\"city\" type=\"text\"/><br/>\r\n                <label>Enter Your Country:</label><br/>\r\n                <input id=\"country\" type=\"text\"/><br/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import React from 'react'\r\n//This function simply displays the data which is obtained by the state of the parent component and sent down as a prop\r\nfunction Result(props){\r\n    console.log(props.data)\r\n    return(\r\n        <div className=\"output\">\r\n           {props.submit? <h2>Weather in {props.data.city}, {props.data.country} today</h2> : null }\r\n            <p>\r\n                temp: {props.data.temp}<br/>\r\n                pressure: {props.data.pressure}<br/>\r\n                humidity: {props.data.humidity}<br/>\r\n                temp_min: {props.data.temp_min}<br/>\r\n                temp_max: {props.data.temp_max}<br/> \r\n            </p> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React from 'react'\n\nimport './App.css'\n\nimport Weather from './components/Weather'\nimport Result from './components/Result'\n//I've created variables called city, country, and API. I will allow the user to input city and country and then structure the api call accordingly\nvar city = ''\nvar country = ''\nvar API =  ''\n\nclass App extends React.Component{\n\n  constructor(){\n    super()\n    this.state={\n      submit:false,\n      city:'',\n      country:''\n    }\n    this.submit = this.submit.bind(this)\n  }\n\n  submit(event){\n    //city and country are taken from the users input\n    city = document.getElementById(\"city\").value\n    country = document.getElementById(\"country\").value\n    //the api call is edited accordingly\n    API = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=8f06d0138689f3dbd2ea6ca85044f5e7`\n    //I'll update state with certain properties that I am expecting from the api\n    this.setState({\n      submit:true,\n      city:city,\n      country:country,\n      temp:'0',\n      pressure:'0',\n      humidity:'0',\n      temp_min:'0',\n      temp_max:'0'\n    })\n\n    event.preventDefault()\n    console.log(API)\n    fetch(API)\n      .then(response => response.json())\n      .then(data =>{\n        //after converting the api response to json data, i can now use it to update state\n        this.setState({\n          temp:Math.floor(data.main.temp-273.15),\n          pressure:data.main.pressure,\n          humidity:data.main.humidity,\n          temp_min:Math.floor(data.main.temp_min-273.15),\n          temp_max:Math.floor(data.main.temp_max-273.15)\n        })\n      })\n      //if the promise is rejected, I will display an error message with the details of what went wrong\n      .catch(error=>console.error(error))\n  }\n\n\n\n  render(){\n    return (\n      <div className=\"app\">\n        <Weather\n        submit={this.submit}\n        />\n        <Result\n        data={this.state}\n        submit={this.state.submit}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}